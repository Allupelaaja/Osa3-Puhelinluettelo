{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","put","delete","Filter","props","onChange","handler","Form","addItem","additem","onSubmit","value","newName","nameChange","newNumber","numberChange","type","Numbers","persons","filter","person","name","toLowerCase","includes","newFilter","map","key","number","onClick","e","removeItem","Notification","message","className","Error","App","useState","setPersons","setNewName","setNewNumber","setNewFilter","notificationMessage","setNotificationMessage","errorMessage","setErrorMessage","useEffect","console","log","personService","then","response","data","length","event","target","preventDefault","some","item","window","confirm","find","setTimeout","catch","error","nameObject","newPersons","splice","indexOf","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0f903e48.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    return axios.get(baseUrl)\r\n}\r\n\r\nconst create = newObject => {\r\n    return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\nconst deleteItem = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nexport default { \r\n    getAll: getAll, \r\n    create: create, \r\n    update: update, \r\n    deleteItem: deleteItem\r\n}","import React, { useEffect, useState } from 'react'\nimport personService from './services/persons'\nimport './App.css'\n\nconst Filter = (props) => {\n  return (\n    <div>\n      filter shown with <input\n      onChange={props.handler}\n      />\n    </div>\n  )\n}\n\nconst Form = (props) => {\n  const addItem = props.additem\n  return (\n    <form onSubmit={addItem}>\n      <div>\n        name: <input\n        value = {props.newName}\n        onChange={props.nameChange}\n      />\n      </div>\n      <div>\n        number: <input\n        value={props.newNumber}\n        onChange={props.numberChange}\n      />\n      </div>\n      <div>\n        <button type=\"submit\"\n        >add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Numbers = (props) => {\n  return (\n    <div>{props.persons.filter(function (person) {return person.name.toLowerCase().includes(props.newFilter.toLowerCase())}).map(person =>\n      <p key={person.name}>{person.name} {person.number} <button onClick={function (e) {props.removeItem(e, person)}}>delete</button></p>)}\n    </div>\n  )\n}\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"notification\">\n      {message}\n    </div>\n  )\n}\n\nconst Error = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newFilter, setNewFilter ] = useState('')\n  const [notificationMessage, setNotificationMessage] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    console.log('effect')\n    personService\n      .getAll()\n      .then(response => {\n        console.log('promise fulfilled')\n        setPersons(response.data)\n      })\n  }, [])\n  console.log('render', persons.length, 'persons')\n\n  const removeItem = (event, person) => {\n    event.preventDefault()\n    if (window.confirm('Delete '+person.name+' ?')) {\n      console.log('effect')\n      console.log(person.id)\n      personService\n        .deleteItem(person.id)\n        .then(response => {\n          console.log('item deleted')\n          console.log(response.data)\n          const newPersons = [...persons]\n          newPersons.splice(newPersons.indexOf(person), 1)\n          setPersons(newPersons)\n          //notification\n          setNotificationMessage('Removed '+person.name)\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 5000)\n        })\n    }\n  }\n\n  const addItem = (event) => {\n    event.preventDefault()\n    if (persons.some(item => item.name === newName)) {\n      //alert(`${newName} is already added to phonebook`)\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        const person = persons.find(person => person.name === newName)\n        person.number = newNumber\n        personService\n        .update(person.id, person)\n        .then(response=> {\n          personService\n          .getAll()\n          .then(response => {\n            setPersons(response.data)\n            //notification\n            setNotificationMessage('Updated '+person.name)\n            setTimeout(() => {\n              setNotificationMessage(null)\n            }, 5000)\n          })\n        })\n        .catch(error => {\n          setErrorMessage('Information of '+person.name+' has already been removed from server')\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n        })\n      }\n    } else {\n      const nameObject = {\n        name: newName,\n        number: newNumber\n      }\n\n      personService\n        .create(nameObject)\n        .then(response => {\n          personService\n          .getAll()\n          .then(response => {\n            setPersons(response.data)\n            //notification\n            setNotificationMessage('Added '+nameObject.name)\n            setTimeout(() => {\n              setNotificationMessage(null)\n            }, 5000)\n          })\n      })\n    }\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value)\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notificationMessage} />\n      <Error message={errorMessage} />\n      <Filter handler={handleFilterChange}/>\n      <h2>add a new</h2>\n      <Form additem={addItem} nameChange={handleNameChange} newName={newName} newNumber={newNumber} numberChange={handleNumberChange}/>\n      <h2>Numbers</h2>\n      <Numbers persons={persons} newFilter={newFilter} removeItem={removeItem}/>\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}