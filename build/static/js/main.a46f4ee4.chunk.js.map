{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","put","delete","Filter","props","handler","onChange","Form","additem","newName","nameChange","newNumber","numberChange","addItem","onSubmit","value","type","Numbers","persons","filter","person","name","toLowerCase","includes","newFilter","map","key","number","onClick","e","removeItem","Notification","message","className","Error","App","useState","setPersons","setNewName","setNewNumber","setNewFilter","notificationMessage","setNotificationMessage","errorMessage","setErrorMessage","useEffect","console","log","personService","then","response","data","length","event","target","preventDefault","some","item","window","confirm","find","personCopy","setTimeout","catch","nameObject","personsCopy","push","error","newPersons","splice","indexOf","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a46f4ee4.chunk.js","sourcesContent":["/* eslint-disable linebreak-style */\r\nimport axios from 'axios';\r\n\r\nconst baseUrl = '/api/persons';\r\n\r\nconst getAll = () => axios.get(baseUrl);\r\n\r\nconst create = (newObject) => axios.post(baseUrl, newObject);\r\n\r\nconst update = (id, newObject) => axios.put(`${baseUrl}/${id}`, newObject);\r\n\r\nconst deleteItem = (id) => axios.delete(`${baseUrl}/${id}`);\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  update,\r\n  deleteItem,\r\n};\r\n","/* eslint-disable react/button-has-type */\n/* eslint-disable no-alert */\n/* eslint-disable consistent-return */\n/* eslint-disable react/jsx-filename-extension */\nimport React, { useEffect, useState } from 'react';\nimport personService from './services/persons';\nimport './App.css';\n\nconst Filter = (props) => {\n  const { handler } = props;\n  if (props.handler) {\n    return (\n      <div>\n        filter shown with\n        {' '}\n        <input\n          onChange={handler}\n        />\n      </div>\n    );\n  }\n};\n\nconst Form = (props) => {\n  if (props.additem) {\n    const {\n      newName, nameChange, newNumber, numberChange,\n    } = props;\n    const addItem = props.additem;\n    return (\n      <form onSubmit={addItem}>\n        <div>\n          name:\n          {' '}\n          <input\n            value={newName}\n            onChange={nameChange}\n          />\n        </div>\n        <div>\n          number:\n          {' '}\n          <input\n            value={newNumber}\n            onChange={numberChange}\n          />\n        </div>\n        <div>\n          <button type=\"submit\">\n            add\n          </button>\n        </div>\n      </form>\n    );\n  }\n};\n\nconst Numbers = (props) => {\n  return(<div>\n    {props.persons.filter((person) => person.name.toLowerCase()\n      .includes(props.newFilter.toLowerCase())).map((person) => (\n      <p key={person.name}>\n        {person.name}\n        {' '}\n        {person.number}\n        {' '}\n        <button onClick={function func(e) { props.removeItem(e, person); }}>delete</button>\n      </p>\n    ))}\n  </div>)\n};\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"notification\">\n      {message}\n    </div>\n  )\n}\n\nconst Error = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [newFilter, setNewFilter] = useState('');\n  const [notificationMessage, setNotificationMessage] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    console.log('effect');\n    personService\n      .getAll()\n      .then((response) => {\n        console.log('promise fulfilled');\n        setPersons(response.data);\n      });\n  }, []);\n  console.log('render', persons.length, 'persons');\n\n  const removeItem = (event, person) => {\n    event.preventDefault();\n    if (window.confirm(`Delete ${person.name} ?`)) {\n      console.log('effect');\n      console.log(person.id);\n      personService\n        .deleteItem(person.id)\n        .then((response) => {\n          console.log('item deleted');\n          console.log(response.data);\n          const newPersons = [...persons];\n          newPersons.splice(newPersons.indexOf(person), 1);\n          setPersons(newPersons);\n          // notification\n          setNotificationMessage(`Removed ${person.name}`);\n          setTimeout(() => {\n            setNotificationMessage(null);\n          }, 5000);\n        });\n    }\n  };\n\n  const addItem = (event) => {\n    event.preventDefault();\n    if (persons.some((item) => item.name === newName)) {\n      // eslint-disable-next-line no-alert\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        const person = persons.find((person) => person.name === newName);\n        const personCopy = { ...person };\n        personCopy.number = newNumber;\n        personService\n          .update(person.id, personCopy)\n          .then(() => {\n            person.number = newNumber;\n            // notification\n            setNotificationMessage(`Updated ${person.name}`);\n            setTimeout(() => {\n              setNotificationMessage(null);\n            }, 5000);\n          })\n          .catch(() => {\n            setErrorMessage(`Information of ${person.name} has already been removed from server`);\n            setTimeout(() => {\n              setErrorMessage(null);\n            }, 5000);\n          });\n      }\n    } else {\n      const nameObject = {\n        name: newName,\n        number: newNumber,\n      };\n\n      personService\n        .create(nameObject)\n        .then((response) => {\n          const personsCopy = [...persons];\n          personsCopy.push(response.data);\n          setPersons(personsCopy);\n          // notification\n          setNotificationMessage(`Added ${nameObject.name}`);\n          setTimeout(() => {\n            setNotificationMessage(null);\n          }, 5000);\n        })\n        .catch((error) => {\n          console.log(error.response.data.error);\n          setErrorMessage(error.response.data.error);\n          setTimeout(() => {\n            setErrorMessage(null);\n          }, 5000);\n        });\n    }\n    setNewName('');\n    setNewNumber('');\n  };\n\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value);\n  };\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value);\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notificationMessage} />\n      <Error message={errorMessage} />\n      <Filter handler={handleFilterChange} />\n      <h2>add a new</h2>\n      <Form\n        additem={addItem}\n        nameChange={handleNameChange}\n        newName={newName}\n        newNumber={newNumber}\n        numberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Numbers persons={persons} newFilter={newFilter} removeItem={removeItem} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}